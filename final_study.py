import pandas as pd
import gradio as gr
import os
import random
import math
import json
from PIL import Image
from pathlib import Path

def generate_batches_from_folder(folder_path, batch_size):
    # Get a list of all files in the folder
    all_files = os.listdir(folder_path)
    
    # Filter out non-image files (you can customize this based on your file extensions)
    image_files = [file for file in all_files if file.lower().endswith(('.jpg'))]
 
    random.shuffle(image_files)
    
    # Split the triplicated image files into batches
    batches1 = [image_files[i:i + batch_size] for i in 
               range(0, len(image_files), batch_size)]
    random.shuffle(image_files)
    
    # Split the triplicated image files into batches
    batches2 = [image_files[i:i + batch_size] for i in 
               range(0, len(image_files), batch_size)]
    random.shuffle(image_files)
    
    # Split the triplicated image files into batches
    batches3 = [image_files[i:i + batch_size] for i in 
               range(0, len(image_files), batch_size)]
    batches = batches1 + batches2 + batches3
    
    # Generate full paths for each batch
    batch_paths = [[os.path.join(folder_path, image) for image in batch] for batch in batches]
    return batch_paths

# Example usage:
folder_path = 'sample_images'
batch_size = 5
result = generate_batches_from_folder(folder_path, batch_size)

image_path = []
nxt_page = False
user = ""
training_active = False
study_active = False
default_image = Image.open(f'images/a realistic face (1).jpg')
global training_tab

training_tab = gr.Tab(label="training", interactive=False)
default_image_path = 'C:/RL_Project/projectReinforcementLearning/images_training/2.jpg'
default_explain="Correct Image :\n\nThis image is classified as a correct image since it does not have any of the other five problems we are looking at in a generated face. The image accurately reflects the prompt that we have provided and the facial structure of the man looks realistic."
default_level="No mistakes"
default_cat_exp="Generated faces do not suffer from any kind of structural or feature-related problem. Realistic human faces."
def link_user_to_pics(username):
    df_users = pd.DataFrame()
    pics = get_pictures(username)
    df_users['pictures'] = json.loads(pics.replace('\'', '"'))
    df_users['username'] = username
    df_users['Category'] = None
    df_users['Level'] = None
    global training_active
    global study_active
    training_active = True
    study_active = True
    global default_image
    default_image = gr.Image(df_users['username'][0])
    print(df_users)
    global image_path
    image_path=df_users['pictures']
    df_users.to_csv(f"ratings_{username}.csv", index=False)
    global data_array
    data_array = df_users

    training.launch(inbrowser=True)
    return True

def get_pictures(username):
    df = pd.read_csv("batches.csv")
    first_empty_index = (df['username'].isna() | (df['username'] == '')).idxmax()
    df.at[first_empty_index, 'username'] = username
    df.to_csv("batches.csv", index=False)
    return df.at[first_empty_index, 'batch']
    # for index, row in df.iterrows():
    #     if any(row):
    #         df.at[index, 'username'] = username
    #         df.to_csv("batches.csv", index=False)
    #         print(row['batch'])
    #         return row['batch']



def next_page(username):
    global nxt_page
    global user
    user = username
    if (len(username)>0) & (len(username)<12):
        nxt_page = True
        return gr.Button(interactive=True, value="Continue")
    return gr.Button(interactive=False, value="Continue")
    



with gr.Blocks() as introduction:
    
    gr.Markdown(
    """
    # Introduction
    Hello and welcome to our study! Our goal is to create a dataset of realistic images of faces 
    generated by artificial intelligence. Most AI-generated images contain at least small mistakes.
    We want to assign a category and a level of mistake to each image. In this study you will be presented 
    with different images with varying degrees of mistakes. For some mistakes you may need to zoom in on 
    the picture. There are five different mistake categories:
    * Alignment Problem
    * Incorrect Proportions
    * Number of features
    * Wrong Aspects
    * Unrealistic
    
    Enter a username and press continue to see some examples of images and their categories.
    """)
    username = gr.Textbox(placeholder="Username", label="Enter any username", max_lines=1)
    nxt_page = gr.Button(interactive=False, value="Continue")
    username.change(next_page, username, nxt_page)
    training_tab = nxt_page.click(link_user_to_pics, inputs=username)


"""
Here starts the part for training/examples section
"""


# Load the CSV file
df = pd.read_csv('./training_images_log.csv')

# Grouping image paths by category
category_to_images = df.groupby('category_name')['image_path'].apply(list).to_dict()

#Grouping category_name to category
category_to_names = df.groupby('category')['category_name'].apply(list).to_dict()
#dictionary mapping image paths to explanations
image_to_explanation = dict(zip(df['image_path'], df['explanation']))

#dict mapping of image path to prompt
image_to_prompt = dict(zip(df['image_path'], df['prompt']))

#dictionary mapping image paths to levels of mistake
image_to_mistake = dict(zip(df['image_path'], df['level_of_mistake']))

#dict mapping of image path to category explanation
image_to_cat_exp = dict(zip(df['image_path'], df['category_explanation']))

#slider for level of mistake (needs to be put as an image)

# Dictionary to keep track of the last shown image index for each category
#last_shown = {category: 0 for category in category_to_images}

# Function to load an image
def image_load(image_path):
    img = Image.open(image_path)
    #img_resized=img.resize((300,300))
    return img
    #return gr.ImageEditor(value=img)

# Function to display an image for the selected category
def show_image(category):
    if category in category_to_images:
        # Get the list of image paths for this category
        image_path = category_to_images[category][0]
    
        explanation= image_to_explanation.get(image_path,"No explanation available for this image")
        prompt=image_to_prompt.get(image_path,"No prompt available")
        category_explain=image_to_cat_exp.get(image_path, "No explanation of category")
        level_msk=image_to_mistake.get(image_path,"No levels specified")
        return prompt,image_load(image_path),category_explain,explanation,level_msk
    
    else:
        return None  # Or return a default image if the category is not found

# Unique categories for dropdown
categories = df['category'].unique().tolist()
category_name = df['category_name'].unique().tolist()

def continue_to_main():

    default_image = data_array['pictures'][current_index]
    main.launch(inbrowser=True)
    
with gr.Blocks() as training:
    
    gr.Markdown(
    """
    # Training phase
    
    On the left, we have the text prompt along with the generated image. 
    On the right, we have the 6 radio buttons with categories and respective explanations. 
    
    Currently we can see first radio button 'Correct Image' is selected and an example image with respective text prompt, category explanation and reason for choice of category displayed.
    
    Please select other radio buttons to see respective examples. 
    Thank you.

    """
    )

    with gr.Row(): 
     with gr.Column():
            output_text1=gr.Text(label="Prompt", info="Select a category from the 6 radio buttons", value="sleeping face, man, realistic")
            output_image=gr.ImageEditor(height=576,width=416,value=default_image_path)
     with gr.Column():
            radio=gr.Radio(choices=category_name,value="Correct Image", label="Category of Mistake",info="Please choose 1 category from the 6 options below")
            output_text2=gr.Text(label="Short Explanation of Category",value=default_cat_exp)
            output_text3=gr.Text(label="Reason for Category Choice",info="Why this image belongs to the above selected category",value =default_explain)
            output_text4=gr.Text(label="Level of Mistake",value=default_level)
    radio.change(fn=show_image, inputs=radio, outputs=[output_text1,output_image,output_text2,output_text3,output_text4])

    button = gr.Button("Continue To Pre-Study")
    button.click(continue_to_main)

    

"""
Here starts the part for the main study
"""

def continue_to_end():
    finished_screen.launch(inbrowser=True)

# Initial index for displaying the first image
current_index = 0
# Boolean which indicates if all pictures were displayed
reached_end = False
# Function to update the displayed image and category

def update_data():

        
    data_array = pd.read_csv("ratings_" + user + ".csv")
    global current_index
    current_index = (current_index + 1) % len(data_array)
    img_path = data_array['pictures'][current_index]#, data_array[current_index]["category"]
    img = Image.open(img_path)
    
    current_picture_label = gr.Label(str(current_index +1) + "/" + str(batch_size))
    
    global reached_end

    print(reached_end)
    if reached_end:
        continue_to_end()
        
    if (current_index+1) == batch_size:
        reached_end = True
    
    img = gr.ImageEditor(img,height=576,width=416, label=str(current_index+1) + "/" + str(batch_size))
    return img
    
def save_rating(radio, slider):

    path = "ratings_" + user + ".csv"
    df = pd.read_csv(path)
    
    df.loc[df['pictures']==image_path[current_index],['Category']] = radio
    df.loc[df['pictures']==image_path[current_index],['Level']] = slider

    categories_radio = gr.Radio(visible=False)
    slider = gr.Slider(visible=False)

    df.to_csv(path, header=True, index=False)

    return update_data(), categories_radio, slider

def save_no_mistake():
    path = "ratings_" + user + ".csv"
    df = pd.read_csv(path)
    
    df.loc[df['pictures']==image_path[current_index],['Category']] = "Correct Image"
    df.loc[df['pictures']==image_path[current_index],['Level']] = 0

    df.to_csv(path, header=True, index=False)

    return update_data()

   
def display_categories():

    categories_radio = gr.Radio(["Alignment Problems", "Incorrect proportions", "Number of features", "Wrong Aspects", "unrealistic"], interactive=True, visible=True) 
    slider = gr.Slider(minimum=0, maximum=5, step=1, interactive=True, visible=True)
    outputs = [categories_radio, slider]
    return outputs

    
with gr.Blocks() as main:
    gr.Markdown(
        """
        # Main study
        Now it is your turn. Look closely at the pictures and look for mistakes in the pictures.
         
        If you spot a mistake, then click "YES" and say which category the mistake has and also which degree the mistake has in your opinion.
        Then submit your rating, and the next image appears. 
        If you don't spot any mistake, click "NO", and the next image apppears.
        
        """)
    
    gr.Textbox(label="prompt", value="this is the prompt")

    
    image = gr.ImageEditor(default_image, height=576,width=416, label=str(current_index+1) + "/" + str(batch_size))
    
    with gr.Column():
        gr.Markdown(
            """
            # Do you spot any Mistake in this picture?
            """
        )
        yes_button = gr.Button("YES")
        # yes_button.click(display_categories, inputs=[], outputs=[gr.Radio(), gr.Slider()])
        no_button  = gr.Button("NO")
        #radio = gr.Radio(["YES", "NO"], label="Select")   
        
        
        
        categories_radio = gr.Radio(visible=False)
        
        slider = gr.Slider(visible=False)

        yes_button.click(display_categories, 
             inputs=[],
             outputs=[categories_radio, slider]
        )

        
        submit_button = gr.Button("Submit")

    no_button.click(fn=save_no_mistake, inputs=[], outputs=[image])

    submit_button.click(
        fn=save_rating,
        inputs=[categories_radio, slider],
        outputs=[image, categories_radio, slider]
    )

with gr.Blocks() as finished_screen:
    gr.Markdown(
        """
        # Thank you for Participating!!!
        You can now close the study
        """
    )
# demo = gr.TabbedInterface([introduction, training, main], ["Introduction", "Examples", "Main Study"])

introduction.launch(inbrowser=True)
    